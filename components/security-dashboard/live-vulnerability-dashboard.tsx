"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { BadgeAlertIcon as Alert, Clock, ExternalLink, Shield, Zap, BadgeAlertIcon as Alert } from "lucide-react"
import { useTheme } from "next-themes"

// Simulated vulnerability data
const vulnerabilityData = {
  stats: {
    critical: 4,
    high: 12,
    medium: 27,
    low: 18,
    total: 61,
    mitigated: 38,
    percentageMitigated: 62,
  },
  recentVulnerabilities: [
    {
      id: "CVE-2023-1872",
      title: "Microsoft Azure AD Privilege Escalation",
      severity: "Critical",
      cvssScore: 9.8,
      status: "Mitigation in Progress",
      discoveredAt: "2023-11-15",
      description:
        "A vulnerability in Azure AD that could allow an attacker to escalate privileges through token manipulation.",
      affectedSystems: ["Azure AD", "Identity Services"],
      recommendedAction: "Apply Microsoft patch MS23-012 immediately and validate permissions.",
    },
    {
      id: "CVE-2023-2190",
      title: "AWS S3 Bucket Misconfiguration",
      severity: "High",
      cvssScore: 8.2,
      status: "Mitigated",
      discoveredAt: "2023-12-03",
      description: "Improper access control allowing unauthorized listing of bucket contents.",
      affectedSystems: ["AWS S3", "Storage Services"],
      recommendedAction: "Review S3 bucket policies and implement least privilege access controls.",
    },
    {
      id: "CVE-2023-4071",
      title: "Splunk Forwarder Remote Code Execution",
      severity: "Critical",
      cvssScore: 9.3,
      status: "Mitigation in Progress",
      discoveredAt: "2023-12-18",
      description: "A vulnerability in Splunk Forwarder allowing remote code execution through crafted inputs.",
      affectedSystems: ["SIEM", "Log Collection"],
      recommendedAction: "Upgrade to Splunk Forwarder 9.1.2 or apply the security patch.",
    },
    {
      id: "CVE-2023-3821",
      title: "VPN Gateway Authentication Bypass",
      severity: "High",
      cvssScore: 8.7,
      status: "Mitigated",
      discoveredAt: "2023-11-28",
      description: "Authentication bypass vulnerability in VPN gateway allowing unauthorized network access.",
      affectedSystems: ["VPN", "Network Security"],
      recommendedAction: "Update firmware to version 10.2.5 and implement MFA.",
    },
    {
      id: "CVE-2023-5204",
      title: "Kubernetes API Server RBAC Bypass",
      severity: "Medium",
      cvssScore: 6.5,
      status: "Under Review",
      discoveredAt: "2023-12-22",
      description: "RBAC validation issue allowing potential privilege escalation within Kubernetes clusters.",
      affectedSystems: ["Kubernetes", "Container Orchestration"],
      recommendedAction: "Apply the recommended patch from Kubernetes security advisory KSA-2023-011.",
    },
  ],
  trends: {
    lastMonth: {
      new: 14,
      mitigated: 21,
      critical: {
        new: 2,
        mitigated: 3,
      },
      high: {
        new: 5,
        mitigated: 8,
      },
    },
    thisMonth: {
      new: 8,
      mitigated: 17,
      critical: {
        new: 1,
        mitigated: 2,
      },
      high: {
        new: 3,
        mitigated: 6,
      },
    },
  },
}

// Simulate real-time updates
function getUpdatedData() {
  // Simulate small fluctuations in the data
  const randomChange = () => Math.floor(Math.random() * 3) - 1 // -1, 0, or 1

  return {
    ...vulnerabilityData,
    stats: {
      ...vulnerabilityData.stats,
      critical: Math.max(3, vulnerabilityData.stats.critical + randomChange()),
      high: Math.max(10, vulnerabilityData.stats.high + randomChange()),
      medium: Math.max(20, vulnerabilityData.stats.medium + randomChange()),
      low: Math.max(15, vulnerabilityData.stats.low + randomChange()),
    },
  }
}

export function LiveVulnerabilityDashboard() {
  const [activeTab, setActiveTab] = useState("overview")
  const [data, setData] = useState(vulnerabilityData)
  const [lastUpdated, setLastUpdated] = useState(new Date())
  const { theme } = useTheme()

  // Simulate real-time updates every 15 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setData(getUpdatedData())
      setLastUpdated(new Date())
    }, 15000)

    return () => clearInterval(interval)
  }, [])

  // Get color for severity
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return "bg-red-500 text-white"
      case "high":
        return "bg-orange-500 text-white"
      case "medium":
        return "bg-yellow-500 text-black"
      case "low":
        return "bg-blue-500 text-white"
      default:
        return "bg-gray-500 text-white"
    }
  }

  // Get icon for status
  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case "mitigated":
        return <Shield className="h-4 w-4 text-green-400" />
      case "mitigation in progress":
        return <Clock className="h-4 w-4 text-amber-400" />
      case "under review":
        return <AlertCircle className="h-4 w-4 text-blue-400" />
      default:
        return <Alert className="h-4 w-4 text-red-400" />
    }
  }

  return (
    <div className="bg-gray-50 dark:bg-gray-900 rounded-xl p-4 md:p-6 shadow-md">
      <div className="flex justify-between items-start mb-6">
        <div>
          <h2 className="text-2xl font-bold">Vulnerability Management Dashboard</h2>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            Real-time insights into security vulnerabilities and mitigation status
          </p>
        </div>
        <div className="text-sm text-gray-500 dark:text-gray-400 flex items-center">
          <Clock className="h-4 w-4 mr-1" />
          Last updated: {lastUpdated.toLocaleTimeString()}
        </div>
      </div>

      <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="mb-6">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
          <TabsTrigger value="trends">Trends</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* Critical Vulnerabilities Card */}
            <Card className="bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800">
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <Shield className="h-5 w-5 text-red-500" />
                  Critical
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-red-600 dark:text-red-400">{data.stats.critical}</div>
                <p className="text-sm text-red-600/70 dark:text-red-400/70">Open vulnerabilities</p>
              </CardContent>
            </Card>

            {/* High Vulnerabilities Card */}
            <Card className="bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800">
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2">
                  <Alert className="h-5 w-5 text-orange-500" />
                  High
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-orange-600 dark:text-orange-400">{data.stats.high}</div>
                <p className="text-sm text-orange-600/70 dark:text-orange-400/70">Open vulnerabilities</p>
              </CardContent>
            </Card>

            {/* Medium & Low Vulnerabilities Card */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Medium & Low</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div className="text-center">
                    <div className="text-xl font-bold text-yellow-600 dark:text-yellow-400">{data.stats.medium}</div>
                    <p className="text-xs text-muted-foreground">Medium</p>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-blue-600 dark:text-blue-400">{data.stats.low}</div>
                    <p className="text-xs text-muted-foreground">Low</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Mitigation Progress Card */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Mitigation Progress</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center gap-2 mb-2">
                  <div className="text-2xl font-bold text-green-600 dark:text-green-500">
                    {data.stats.percentageMitigated}%
                  </div>
                </div>
                <Progress value={data.stats.percentageMitigated} className="h-2" indicatorClassName="bg-green-500" />
                <p className="text-sm text-muted-foreground mt-2">
                  {data.stats.mitigated} of {data.stats.total} mitigated
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Recent Vulnerabilities Preview */}
          <Card>
            <CardHeader>
              <CardTitle>Recent Critical & High Vulnerabilities</CardTitle>
              <CardDescription>Latest detected security issues requiring attention</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {data.recentVulnerabilities
                  .filter((v) => v.severity === "Critical" || v.severity === "High")
                  .slice(0, 3)
                  .map((vuln) => (
                    <motion.div
                      key={vuln.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                      className="flex items-start gap-3 p-3 bg-gray-100 dark:bg-gray-800/50 rounded-lg"
                    >
                      <div
                        className={`rounded-full p-2 flex-shrink-0 ${
                          vuln.severity === "Critical"
                            ? "bg-red-100 dark:bg-red-900/30"
                            : "bg-orange-100 dark:bg-orange-900/30"
                        }`}
                      >
                        {vuln.severity === "Critical" ? (
                          <Zap className="h-5 w-5 text-red-600 dark:text-red-400" />
                        ) : (
                          <Alert className="h-5 w-5 text-orange-600 dark:text-orange-400" />
                        )}
                      </div>
                      <div className="flex-grow">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <span className="font-medium">{vuln.id}</span>
                            <Badge className={getSeverityColor(vuln.severity)} variant="secondary">
                              {vuln.severity}
                            </Badge>
                          </div>
                          <div className="flex items-center gap-1 text-sm">
                            {getStatusIcon(vuln.status)}
                            <span>{vuln.status}</span>
                          </div>
                        </div>
                        <h4 className="text-base font-medium mt-1">{vuln.title}</h4>
                        <p className="text-sm text-muted-foreground line-clamp-2 mt-1">{vuln.description}</p>
                        <div className="flex items-center gap-2 mt-2">
                          <Badge variant="outline">CVSS: {vuln.cvssScore}</Badge>
                          {vuln.affectedSystems.slice(0, 2).map((system) => (
                            <Badge key={system} variant="outline">
                              {system}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </motion.div>
                  ))}
              </div>
            </CardContent>
            <CardFooter className="flex justify-end">
              <div
                className="text-sm text-blue-600 dark:text-blue-400 hover:underline cursor-pointer flex items-center"
                onClick={() => setActiveTab("vulnerabilities")}
              >
                View all vulnerabilities <ExternalLink className="ml-1 h-3 w-3" />
              </div>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="vulnerabilities" className="space-y-6">
          {/* Full vulnerabilities list */}
          <Card>
            <CardHeader>
              <CardTitle>All Vulnerabilities</CardTitle>
              <CardDescription>Complete list of identified security vulnerabilities</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {data.recentVulnerabilities.map((vuln) => (
                  <motion.div
                    key={vuln.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                    className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <span className="font-mono text-sm bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                          {vuln.id}
                        </span>
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity} - CVSS {vuln.cvssScore}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-1 text-sm">
                        {getStatusIcon(vuln.status)}
                        <span>{vuln.status}</span>
                      </div>
                    </div>
                    <h4 className="text-lg font-medium mb-2">{vuln.title}</h4>
                    <p className="text-sm text-muted-foreground mb-3">{vuln.description}</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                      <div>
                        <strong className="block text-gray-500 dark:text-gray-400">Affected Systems</strong>
                        <div className="flex flex-wrap gap-2 mt-1">
                          {vuln.affectedSystems.map((system) => (
                            <Badge key={system} variant="outline">
                              {system}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div>
                        <strong className="block text-gray-500 dark:text-gray-400">Discovered</strong>
                        <span>{vuln.discoveredAt}</span>
                      </div>
                    </div>
                    <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                      <strong className="block text-gray-500 dark:text-gray-400 text-sm">Recommended Action</strong>
                      <p className="text-sm mt-1">{vuln.recommendedAction}</p>
                    </div>
                  </motion.div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="trends" className="space-y-6">
          {/* Trends and analytics */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Monthly Comparison</CardTitle>
                <CardDescription>Vulnerability trends month over month</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-4">
                    <h3 className="font-medium text-center">Last Month</h3>
                    <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg text-center">
                      <div className="text-3xl font-bold">{data.trends.lastMonth.new}</div>
                      <div className="text-sm text-muted-foreground">New</div>
                    </div>
                    <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg text-center">
                      <div className="text-3xl font-bold text-green-600 dark:text-green-400">
                        {data.trends.lastMonth.mitigated}
                      </div>
                      <div className="text-sm text-muted-foreground">Mitigated</div>
                    </div>
                  </div>
                  <div className="space-y-4">
                    <h3 className="font-medium text-center">This Month</h3>
                    <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg text-center">
                      <div className="text-3xl font-bold">{data.trends.thisMonth.new}</div>
                      <div className="text-sm text-muted-foreground">New</div>
                    </div>
                    <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg text-center">
                      <div className="text-3xl font-bold text-green-600 dark:text-green-400">
                        {data.trends.thisMonth.mitigated}
                      </div>
                      <div className="text-sm text-muted-foreground">Mitigated</div>
                    </div>
                  </div>
                </div>

                <div className="mt-6">
                  <h3 className="font-medium mb-3">Critical & High Vulnerabilities</h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Last Month</span>
                        <span>{data.trends.lastMonth.critical.new + data.trends.lastMonth.high.new} new</span>
                      </div>
                      <Progress
                        value={100}
                        className="h-3 bg-gray-200 dark:bg-gray-700"
                        indicatorClassName="bg-gradient-to-r from-red-500 to-orange-500"
                      />
                      <div className="flex justify-between text-sm mt-1">
                        <span>
                          Mitigated: {data.trends.lastMonth.critical.mitigated + data.trends.lastMonth.high.mitigated}
                        </span>
                        <span className="text-green-600 dark:text-green-400">
                          {Math.round(
                            ((data.trends.lastMonth.critical.mitigated + data.trends.lastMonth.high.mitigated) /
                              (data.trends.lastMonth.critical.new + data.trends.lastMonth.high.new)) *
                              100,
                          )}
                          %
                        </span>
                      </div>
                    </div>
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>This Month</span>
                        <span>{data.trends.thisMonth.critical.new + data.trends.thisMonth.high.new} new</span>
                      </div>
                      <Progress
                        value={100}
                        className="h-3 bg-gray-200 dark:bg-gray-700"
                        indicatorClassName="bg-gradient-to-r from-red-500 to-orange-500"
                      />
                      <div className="flex justify-between text-sm mt-1">
                        <span>
                          Mitigated: {data.trends.thisMonth.critical.mitigated + data.trends.thisMonth.high.mitigated}
                        </span>
                        <span className="text-green-600 dark:text-green-400">
                          {Math.round(
                            ((data.trends.thisMonth.critical.mitigated + data.trends.thisMonth.high.mitigated) /
                              (data.trends.thisMonth.critical.new + data.trends.thisMonth.high.new)) *
                              100,
                          )}
                          %
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Mitigation Efficiency</CardTitle>
                <CardDescription>Time to mitigation and response metrics</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <div className="flex justify-between mb-2">
                      <h3 className="font-medium">Average Time to Mitigation</h3>
                      <div className="font-mono">4.2 days</div>
                    </div>
                    <div className="space-y-3">
                      <div>
                        <div className="flex justify-between text-sm mb-1">
                          <span>Critical</span>
                          <span className="font-mono">23.5 hours</span>
                        </div>
                        <Progress value={22} className="h-2" indicatorClassName="bg-red-500" />
                      </div>
                      <div>
                        <div className="flex justify-between text-sm mb-1">
                          <span>High</span>
                          <span className="font-mono">2.8 days</span>
                        </div>
                        <Progress value={38} className="h-2" indicatorClassName="bg-orange-500" />
                      </div>
                      <div>
                        <div className="flex justify-between text-sm mb-1">
                          <span>Medium</span>
                          <span className="font-mono">5.7 days</span>
                        </div>
                        <Progress value={65} className="h-2" indicatorClassName="bg-yellow-500" />
                      </div>
                      <div>
                        <div className="flex justify-between text-sm mb-1">
                          <span>Low</span>
                          <span className="font-mono">12.3 days</span>
                        </div>
                        <Progress value={100} className="h-2" indicatorClassName="bg-blue-500" />
                      </div>
                    </div>
                  </div>

                  <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
                    <h3 className="font-medium mb-3">Monthly Improvement</h3>
                    <div className="grid grid-cols-3 gap-2 text-center">
                      <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg">
                        <div className="text-xl font-bold text-green-600 dark:text-green-400">-18%</div>
                        <div className="text-xs text-muted-foreground">Time to fix</div>
                      </div>
                      <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg">
                        <div className="text-xl font-bold text-green-600 dark:text-green-400">+14%</div>
                        <div className="text-xs text-muted-foreground">Detection rate</div>
                      </div>
                      <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg">
                        <div className="text-xl font-bold text-green-600 dark:text-green-400">+22%</div>
                        <div className="text-xs text-muted-foreground">Coverage</div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
